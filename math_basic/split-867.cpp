/*
给定 n 个正整数 a_i，将每个数分解质因数，并按照质因数从小到大的顺序输出每个质因数的底数和指数。
输入格式
第一行包含整数 n。

接下来 n 行，每行包含一个正整数 a_i。

输出格式
对于每个正整数 a_i，按照从小到大的顺序输出其分解质因数后，每个质因数的底数和指数，每个底数和指数占一行。
每个正整数的质因数全部输出完毕后，输出一个空行。

数据范围
1≤n≤100,
2≤a_i≤2×10^9
输入样例：
2
6
8
输出样例：
2 1
3 1

2 3
*/
#include <iostream>

inline void find_split(int& a_i)
{
	for(int i = 2; i <= a_i / i; i++)
	{
		int count = 0;
		while(a_i % i == 0)
		{
			a_i = a_i / i;
			count++;
		}
		if(count != 0) { std::cout << i << " " << count << "\n"; }
	}
}

int main()
{
	int n, a;
	std::cin >> n;
	while(n--)
	{
		std::cin >> a;
        // if(a==1) std::cout << a << " 1" << "\n";
		find_split(a);
		if(a != 1) { std::cout << a << " 1" << "\n"; }
		std::cout << "\n";
	}
}

/*
思路：从大到小除质数，但是不需要去筛选出质数，只需要挨个除，因为除i时保证了之前去除了它之前的所有数字，然后除i，那么如果i不是质数，那不可能整除得了，因为i就能被分解
为几个小的质数，那代表着这个数还能被之前的质数整除，这是矛盾的，所以不会除到之前的质数
*/